{
 "cells": [
  {
   "cell_type": "raw",
   "id": "68d2bc11-662f-4d2a-898b-15962c1f6c3e",
   "metadata": {},
   "source": [
    "Q1- What is MongoDB?Expalin non-relational database in short. in which scenarios it is preffered to use MngonDB over SQL database?"
   ]
  },
  {
   "cell_type": "raw",
   "id": "d2ab8779-e67c-47a9-8061-325a121bc383",
   "metadata": {},
   "source": [
    "MongoDB is a popular, open-source, NoSQL (non-relational) database that stores data in a flexible, JSON-like format called BSON (Binary JSON). It falls under the category of document-oriented databases, where data is stored as collections of documents instead of traditional rows and columns used in relational databases.\n",
    "\n",
    "Non-relational databases (NoSQL) have some key characteristics:\n",
    "\n",
    "Schema Flexibility: Unlike relational databases, NoSQL databases do not require a predefined schema for data. Each document can have a different structure, allowing for easy adaptation to changing data requirements.\n",
    "\n",
    "Scalability: NoSQL databases are designed to scale horizontally, which means they can handle large amounts of data and traffic by distributing the data across multiple servers.\n",
    "\n",
    "High Performance: NoSQL databases are optimized for high read/write throughput and can handle vast amounts of data efficiently.\n",
    "\n",
    "Simplified Data Model: NoSQL databases, including MongoDB, often provide a simpler and more intuitive data model, especially for use cases where complex joins or transactions are not needed.\n",
    "\n",
    "Support for Unstructured Data: NoSQL databases can store semi-structured or unstructured data like JSON, XML, or other key-value pairs.\n",
    "\n",
    "Scenarios where MongoDB is preferred over SQL databases:\n",
    "\n",
    "Flexible Schema: When the data schema is likely to evolve over time or when dealing with semi-structured or unstructured data, MongoDB's flexible schema is more suitable.\n",
    "\n",
    "High Volume of Read and Write Operations: MongoDB performs well under high read/write workloads, making it a good choice for applications with heavy traffic.\n",
    "\n",
    "Real-time Analytics: MongoDB can handle real-time data analytics and aggregations efficiently, making it suitable for real-time data-driven applications.\n",
    "\n",
    "Scalability: MongoDB's ability to scale horizontally across multiple nodes allows it to handle large amounts of data and growing user bases."
   ]
  },
  {
   "cell_type": "raw",
   "id": "d4af0cb7-9e5e-45ff-a8f1-8f813ee98fa6",
   "metadata": {},
   "source": [
    "Q2- SATAE AND EXPLAIN THE FEATURES OF MONGODB."
   ]
  },
  {
   "cell_type": "raw",
   "id": "6f6e6f36-b94d-478d-bab1-ae647c560f19",
   "metadata": {},
   "source": [
    "Flexible Schema: When the data schema is likely to evolve over time or when dealing with semi-structured or unstructured data, MongoDB's flexible schema is more suitable.\n",
    "\n",
    "High Volume of Read and Write Operations: MongoDB performs well under high read/write workloads, making it a good choice for applications with heavy traffic.\n",
    "\n",
    "Real-time Analytics: MongoDB can handle real-time data analytics and aggregations efficiently, making it suitable for real-time data-driven applications.\n",
    "\n",
    "Scalability: MongoDB's ability to scale horizontally across multiple nodes allows it to handle large amounts of data and growing user bases."
   ]
  },
  {
   "cell_type": "raw",
   "id": "c061484c-4e08-4dc5-8eba-e770dd3c510b",
   "metadata": {},
   "source": [
    "Q3-Write acode to connect MongoDB TO PYTHON. Also,create a database and a collection in MongoDB."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "8559667a-7e4c-4a3e-ac5f-f46079c9f6ca",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Pinged your deployment. You successfully connected to MongoDB!\n"
     ]
    }
   ],
   "source": [
    "\n",
    "from pymongo.mongo_client import MongoClient\n",
    "\n",
    "uri = \"mongodb+srv://rk648346:alusteel@cluster0.jazqaxn.mongodb.net/?retryWrites=true&w=majority\"\n",
    "\n",
    "# Create a new client and connect to the server\n",
    "client = MongoClient(uri)\n",
    "\n",
    "# Send a ping to confirm a successful connection\n",
    "try:\n",
    "    client.admin.command('ping')\n",
    "    print(\"Pinged your deployment. You successfully connected to MongoDB!\")\n",
    "except Exception as e:\n",
    "    print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "e0c1633f-86e5-43c8-90d1-9c4b8407b3ad",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: pymongo in /opt/conda/lib/python3.10/site-packages (4.4.1)\n",
      "Requirement already satisfied: dnspython<3.0.0,>=1.16.0 in /opt/conda/lib/python3.10/site-packages (from pymongo) (2.4.1)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install pymongo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "6c28ec04-12e9-4fbd-9444-1a6e612454c1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "MongoClient(host=['ac-7np99sr-shard-00-00.jazqaxn.mongodb.net:27017', 'ac-7np99sr-shard-00-02.jazqaxn.mongodb.net:27017', 'ac-7np99sr-shard-00-01.jazqaxn.mongodb.net:27017'], document_class=dict, tz_aware=False, connect=True, retrywrites=True, w='majority', authsource='admin', replicaset='atlas-bfv5sy-shard-0', tls=True)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "client"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "8cff07a3-29de-4c54-a185-19c1ccfde86b",
   "metadata": {},
   "outputs": [],
   "source": [
    "uri = \"mongodb+srv://rk648346:alusteel@cluster0.jazqaxn.mongodb.net/?retryWrites=true&w=majority\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "0eefe08f-2705-4719-8a6f-4466d70e58e4",
   "metadata": {},
   "outputs": [],
   "source": [
    "client = MongoClient(uri)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "ee161b9f-1a0c-4c91-80b7-fa8153bb819c",
   "metadata": {},
   "outputs": [],
   "source": [
    "db = client['pwskills']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "d1760ea5-5e10-416e-9b08-40a13f08027d",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = {'name': 'John', 'age': 30},\n",
    "       {'name': 'Emma', 'age': 25},\n",
    "       {'name': 'Michael', 'age': 42},\n",
    "       {'name': 'Sophia', 'age': 18},\n",
    "       {'name': 'William', 'age': 55}\n",
    "      ]      \n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "40e0c0ea-2ac4-47dd-804c-9449a6dc4a22",
   "metadata": {},
   "outputs": [],
   "source": [
    "coll_pwskills = db[\"new_record\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "93a8f94f-12e1-412c-a279-b74dcb569402",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<pymongo.results.InsertManyResult at 0x7f695edcb640>"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "coll_pwskills.insert_many(data)"
   ]
  },
  {
   "cell_type": "raw",
   "id": "a87866db-afe7-4a64-a0b7-9a3618c4236c",
   "metadata": {},
   "source": [
    "Q4- using the database and the collection created in question number 3, write a code to insert one record, and insert many records.use the find()and find_one() method to print the inserted record."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "77d764ed-7fe3-4155-9022-a70e903c43fc",
   "metadata": {},
   "outputs": [],
   "source": [
    "data1 = {\"name\" : \"rohit\",\n",
    "        \"class\" : \"data science masters\" ,\n",
    "        \"time\" : \"flexi\"}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "98cbeb36-feae-40ea-bffb-55645f0cc8f7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<pymongo.results.InsertOneResult at 0x7f69a04348b0>"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "coll_pwskills.insert_one(data1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "eda191eb-16fd-4c0f-a9cf-a937475f6d92",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<pymongo.cursor.Cursor at 0x7f695ea5d060>"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "coll_pwskills.find()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "63aec4bb-9f1a-4e02-83f9-216caf7b3b19",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'_id': ObjectId('64c867f3717f5feff1e5311c'), 'name': 'John', 'age': 30}\n",
      "{'_id': ObjectId('64c867f3717f5feff1e5311d'), 'name': 'Emma', 'age': 25}\n",
      "{'_id': ObjectId('64c867f3717f5feff1e5311e'), 'name': 'Michael', 'age': 42}\n",
      "{'_id': ObjectId('64c867f3717f5feff1e5311f'), 'name': 'Sophia', 'age': 18}\n",
      "{'_id': ObjectId('64c867f3717f5feff1e53120'), 'name': 'William', 'age': 55}\n",
      "{'_id': ObjectId('64c8691e717f5feff1e53121'), 'name': 'rohit', 'class': 'data science masters', 'time': 'flexi'}\n"
     ]
    }
   ],
   "source": [
    "for i in coll_pwskills.find():\n",
    "     print(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "2faa34e2-6594-438d-a940-ff45769b5d27",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'_id': ObjectId('64c867f3717f5feff1e5311c'), 'name': 'John', 'age': 30}"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "coll_pwskills.find_one({'name':'John'})"
   ]
  },
  {
   "cell_type": "raw",
   "id": "f96b0ea2-0468-4aba-a702-c1ead90cc8f2",
   "metadata": {},
   "source": [
    "Q5- explain how you can use the find() method to query the MongoDB datbase. write a simple code to demostrate this"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "5a616fc9-7cab-42e3-8c53-a20114f78033",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'_id': ObjectId('64c867f3717f5feff1e5311c'), 'name': 'John', 'age': 30}"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "coll_pwskills.find_one({'age' : {'$gte': 25}})"
   ]
  },
  {
   "cell_type": "raw",
   "id": "88f1841f-42c9-4212-9de0-665bff8892d9",
   "metadata": {},
   "source": [
    "Q6- Explain the sort() method. Give an example to demonstrate soRting on MongoDB."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "4206e137-c59a-4df7-92bc-79888347e512",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<pymongo.cursor.Cursor at 0x7f695e56c100>"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "coll_pwskills.find().sort([('age', 1)])\n",
    "\n"
   ]
  },
  {
   "cell_type": "raw",
   "id": "95c004d2-3e22-4fda-b916-79d50498695e",
   "metadata": {},
   "source": [
    "Q7-Explain why delete_one(),delete_many(), and drop() is used."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "89a89b2f-c019-4936-bd44-3088bec37f19",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<pymongo.results.DeleteResult at 0x7f695e6fa920>"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "coll_pwskills.delete_one({'name':'John'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "3746663e-ba49-4fb6-94a8-0fd22435c5a5",
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'dict' object has no attribute 'in_transaction'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[39], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[43mcoll_pwskills\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdrop\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdata1\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pymongo/collection.py:1210\u001b[0m, in \u001b[0;36mCollection.drop\u001b[0;34m(self, session, comment, encrypted_fields)\u001b[0m\n\u001b[1;32m   1176\u001b[0m \u001b[38;5;124;03m\"\"\"Alias for :meth:`~pymongo.database.Database.drop_collection`.\u001b[39;00m\n\u001b[1;32m   1177\u001b[0m \n\u001b[1;32m   1178\u001b[0m \u001b[38;5;124;03m:Parameters:\u001b[39;00m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   1201\u001b[0m \u001b[38;5;124;03m   Added ``session`` parameter.\u001b[39;00m\n\u001b[1;32m   1202\u001b[0m \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m   1203\u001b[0m dbo \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m__database\u001b[38;5;241m.\u001b[39mclient\u001b[38;5;241m.\u001b[39mget_database(\n\u001b[1;32m   1204\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m__database\u001b[38;5;241m.\u001b[39mname,\n\u001b[1;32m   1205\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcodec_options,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   1208\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mread_concern,\n\u001b[1;32m   1209\u001b[0m )\n\u001b[0;32m-> 1210\u001b[0m \u001b[43mdbo\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdrop_collection\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   1211\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m__name\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43msession\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43msession\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcomment\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcomment\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mencrypted_fields\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mencrypted_fields\u001b[49m\n\u001b[1;32m   1212\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pymongo/_csot.py:106\u001b[0m, in \u001b[0;36mapply.<locals>.csot_wrapper\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    104\u001b[0m         \u001b[38;5;28;01mwith\u001b[39;00m _TimeoutContext(timeout):\n\u001b[1;32m    105\u001b[0m             \u001b[38;5;28;01mreturn\u001b[39;00m func(\u001b[38;5;28mself\u001b[39m, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[0;32m--> 106\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mfunc\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pymongo/database.py:1067\u001b[0m, in \u001b[0;36mDatabase.drop_collection\u001b[0;34m(self, name_or_collection, session, comment, encrypted_fields)\u001b[0m\n\u001b[1;32m   1060\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_drop_helper(\n\u001b[1;32m   1061\u001b[0m         _esc_coll_name(encrypted_fields, name), session\u001b[38;5;241m=\u001b[39msession, comment\u001b[38;5;241m=\u001b[39mcomment\n\u001b[1;32m   1062\u001b[0m     )\n\u001b[1;32m   1063\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_drop_helper(\n\u001b[1;32m   1064\u001b[0m         _ecoc_coll_name(encrypted_fields, name), session\u001b[38;5;241m=\u001b[39msession, comment\u001b[38;5;241m=\u001b[39mcomment\n\u001b[1;32m   1065\u001b[0m     )\n\u001b[0;32m-> 1067\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_drop_helper\u001b[49m\u001b[43m(\u001b[49m\u001b[43mname\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43msession\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcomment\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pymongo/database.py:980\u001b[0m, in \u001b[0;36mDatabase._drop_helper\u001b[0;34m(self, name, session, comment)\u001b[0m\n\u001b[1;32m    977\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m comment \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    978\u001b[0m     command[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcomment\u001b[39m\u001b[38;5;124m\"\u001b[39m] \u001b[38;5;241m=\u001b[39m comment\n\u001b[0;32m--> 980\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m__client\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_socket_for_writes\u001b[49m\u001b[43m(\u001b[49m\u001b[43msession\u001b[49m\u001b[43m)\u001b[49m \u001b[38;5;28;01mas\u001b[39;00m sock_info:\n\u001b[1;32m    981\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_command(\n\u001b[1;32m    982\u001b[0m         sock_info,\n\u001b[1;32m    983\u001b[0m         command,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    987\u001b[0m         session\u001b[38;5;241m=\u001b[39msession,\n\u001b[1;32m    988\u001b[0m     )\n",
      "File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pymongo/mongo_client.py:1278\u001b[0m, in \u001b[0;36mMongoClient._socket_for_writes\u001b[0;34m(self, session)\u001b[0m\n\u001b[1;32m   1277\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_socket_for_writes\u001b[39m(\u001b[38;5;28mself\u001b[39m, session):\n\u001b[0;32m-> 1278\u001b[0m     server \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_select_server\u001b[49m\u001b[43m(\u001b[49m\u001b[43mwritable_server_selector\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43msession\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1279\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_get_socket(server, session)\n",
      "File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pymongo/mongo_client.py:1259\u001b[0m, in \u001b[0;36mMongoClient._select_server\u001b[0;34m(self, server_selector, session, address)\u001b[0m\n\u001b[1;32m   1257\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m   1258\u001b[0m     topology \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_get_topology()\n\u001b[0;32m-> 1259\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m session \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[43msession\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43min_transaction\u001b[49m:\n\u001b[1;32m   1260\u001b[0m         session\u001b[38;5;241m.\u001b[39m_transaction\u001b[38;5;241m.\u001b[39mreset()\n\u001b[1;32m   1261\u001b[0m     address \u001b[38;5;241m=\u001b[39m address \u001b[38;5;129;01mor\u001b[39;00m (session \u001b[38;5;129;01mand\u001b[39;00m session\u001b[38;5;241m.\u001b[39m_pinned_address)\n",
      "\u001b[0;31mAttributeError\u001b[0m: 'dict' object has no attribute 'in_transaction'"
     ]
    }
   ],
   "source": [
    "coll_pwskills.drop(data1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b9e1a2ae-d165-4ab5-bbfd-619757540be9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
